## Harjoitustyöraportti

Palauttajat (max 3): Toni Moilanen
Pisteitä yhteensä: 0

## Ongelma 1
Tyyppi: Autentikointi
Sijainti: Koko sovellus
Kuvaus:

Sovellus käyttää keksejä käyttäjän tunnistamiseen ja seuraamiseen sivulta toiselle.
Keksejä voidaan kuitenkin manipuloida, minkä seurauksena esimerkiksi käyttäjää 
voidaan vaihtaa ilman autentikointia. Tämän lisäksi joillekin sivuille pääsee ilman
kirjautumista. 

### Esimerkkihyökkäys:
1) Kirjaudu käyttäjällä sue
2) Vaihda kirjautumisen jälkeen keksin username arvo lion
3) Tulos: Päästään käyttäjän lion tunnukselle

### Korjaus:
Tehdään järjestelmään autentikointi.

Commit: 0536511

Korjasin tämän käyttämällä Flaskin Flask-Login moduulia. Moduulissa on session
seurantaan toiminnot, jolloin sisään kirjautumista voidaan seurata luotettavasti.

Uskon korjauksen toimivan, sillä Flask-Login on Flaskin suositeltu moduuli sessioiden
seuraamiseen.

Korjaus rajoittaa keksien avulla käyttäjien manipuloinnin sekä auttaa seuraamaan, että
kuka sivustolla on kirjautuneena.

### Pisteet(3pt)

1pt vian löytämisestä
1pt vian korjaamisesta
1pt vikatyypin eliminoimisesta



## Ongelma 2
Tyyppi: Ajastushyökkäys
Sijainti: login()
Kuvaus:
Kirjautuessa salasanan vertailuun käytetään "==". Tämä mahdollistaa ajastushyökkäyksen.

Tämä ongelma täytyi korjata autentikointia korjattaessa, koska en osannut tehdä autentikointia
ilman tämän heikkouden korjaamista. Tästä syystä tämä korjaus näkyy samassa commitissa autenti-
koinnin korjaamisen kanssa.

### Esimerkkihyökkäys:
1) Kokeile kirjautua käyttäjälle sue
2) Syötä salasana ja kellota
3) Tulos: Salasana voidaan murtaa kellotuksen perusteella 

### Korjaus:
Käytetään salasanan tarkistamiseen kirjastoa.

Commit: 0536511

Korjasin tämän heikkouden käyttämällä werkzeug.security kirjastoa. Hashasin salasanat ja lisäsin
niihin salaisen merkkijonon. Tämän seurauksena ajastamisen pitäisi olla huomattavasti haastavampaa,
kuin "=="-vertailulla. En saanut mistään selville, että onko check_password_hash sellainen funktio, 
joka tekee ajastuksen täysin mahdottomaksi.

### Pisteet(3pt)

1pt vian löytämisestä
1pt vian korjaamisesta
1pt vikatyypin eliminoimisesta



## Ongelma 3
Tyyppi: XSS-Hyökkäys
Sijainti: Ympäri ohjelmaa
Kuvaus:
Käyttäjällä on erinäisissä kohdissa ohjelmaa mahdollisuus sijoittaa HTML:n sekaan omaa
HTML:ää.


### Esimerkkihyökkäys:
1) Nimeä tiedosto esim. --><!-- ---> <img src=xxx:x onerror=javascript:alert('xss')> -->
2) Lataa palvelimelle
3) Tulos: Ohjelma suorittaa nimeen syötetyn koodin.

### Korjaus:
Commit: 38f4050

Syötetään HTML:n sekaan käyttäjän syötteet turvallisesti, eli korvataan:

'''<h1>File shared: %s</h1>''' % user_input ---> render_template_string('''{{user_input}} ''',
user_input = user_input).

Tällöin Flaskin autoescape estää koodin ajamisen. Tämä ei kuitenkaan toimi <a href=user_input>
tilanteissa.

<a href=user_input> tapaukset eivät kuitenkaan korjaannu tällä tavoin. Nämä korjasin muuttamalla
user_inputit luvuiksi, jotka ohjelmakoodissa muutetaan ennen hakua takaisin jonoksi. Tällä
tavoin hyökkääjällä ei ole mahdollisuutta tehdä XSS-hyökkäyksiä nykyisessä ohjelmassa.

### Pisteet(3pt)

1pt vian löytämisestä
1pt vian korjaamisesta
1pt vikatyypin eliminoimisesta



## Ongelma 4
Tyyppi: Shell-injektio
Sijainti: checkerLoop()
Kuvaus:
filename = queue.get(). Käyttäjä voi antaa filenameksi mitä vain, jolloin syntyy injektiolle mahdollisuus,
sillä filename syötetään suoraan shelli käskyyn. Tämä tapahtuu kohdassa:

res = subprocess.run(
            "file %s" % filename,
            shell=True,
            timeout=15,
            stdout=subprocess.PIPE)

### Esimerkkihyökkäys:
1) Käyttäjä syöttää palvelimelle tiedoston, jonka nimi on: nimi | ls
2) Tulos: Palvelin suorittaa |-merkin jälkeisen komennon

### Korjaus:
Commit: f6822f9

Tarkistetaan tiedosto jollakin toisella menetelmällä. Käytin tiedoston tarkistukseen python-magic moduulia.

Python-magic moduuli tarkistaa tiedoston MIME-otsakkeiden avulla. Tarkistuksen pitäisi olla kohtalaisen varma,
mutta lukemani perusteella MIME:n voi "feikata", jonka seurauksena osaava hakkeri voi ladata palvelimelle
jotakin sellaista, mitä sinne ei pitäisi saada ladata.

Tämä ei ole kuitenkaan kurssin asiaa, ja Shell-injektio on tällä tavoin estetty.

### Pisteet(3pt)

1pt vian löytämisestä
1pt vian korjaamisesta
1pt vikatyypin eliminoimisesta





## Ongelma 5
Tyyppi: Polkuinjektio
Sijainti: Koko sovellus
Kuvaus:

Sovelluksessa on käytetty paljon polkujen rakentamiseen jonojen liimailua. Tämä aiheuttaa heikkouksia, joiden
seurauksena voidaan toteuttaa polkuinjektioita.

### Esimerkkihyökkäys:
1) 

### Korjaus:

Commit: <git hash>

Korjasin 

### Pisteet(3pt)

1pt vian löytämisestä
1pt vian korjaamisesta
1pt vikatyypin eliminoimisesta




## Ongelma 6
Tyyppi: Vääriä tiedostoja palvelimella
Sijainti: upload_file()
Kuvaus:

Palvelimelle voidaan ladata tiedostoja, ja ne voivat olla siellä hetken. Tarkistuksen järjestyksestä
johtuen palvelin altistuu hyökkäykselle: floodaamalla serveri tiedostoilla sinne voidaan ladata
haitallisia tiedostoja ja ne eivät välttämättä ehdi poistua ennen väärinkäytöstä.

Periaatteessa LIFO:n, eli last-in first-out tarkistuksen avulla palvelimelle voidaan ladata tiedosto
ja se on siellä käytettävissä niin kauan, kun sinne lähetetään uusia tiedostoja. Ladattavien tiedostojen
tiheys on riippuvainen threadin nopeudesta.

### Esimerkkihyökkäys:
1) Lataa palvelimelle haitallisia tiedostoja
2) Ala floodaamaan palvelinta muilla tiedostoilla
3) avaa haitallinen tiedosto osoitteessa: localhost:5000/user_content?file=jotain.html

### Korjaus:

Commit: <git hash>

Korjasin ongelman laittamalla palvelimelle siirretyt tiedostot sellaiseen kansioon, johon
käyttäjällä ei ole pääsyoikeutta. Ne siirretään tarkistuksen jälkeen käyttäjän kansioon.

### Pisteet(1pt)

1pt vian löytämisestä
1pt vian korjaamisesta



## Ongelma 7
Tyyppi: Hard koodatut salasanat ja käyttäjänimet
Sijainti: Pääohjelman alkupuolella
Kuvaus:

Hard koodatut salasanat aiheuttavat tietoturvariskin niissä tapauksissa, joissa lähdekoodi
sattuu vuotamaan.
Esim. https://www.beyondtrust.com/resources/glossary/hardcoded-embedded-passwords

### Esimerkkihyökkäys:
1) Saa lähdekoodi jollain keinolla käsiisi
2) Hyödynnä vuodetut tiedot

### Korjaus:

Commit: <git hash>

Korjasin ongelman tekemällä kirjautumissivun. Salasanat tallennetaan kryptattuna tietokantaan,
jolloin selkokielisiä salasanoja ei ole saatavilla.

### Pisteet(1pt)

1pt vian löytämisestä
1pt vian korjaamisesta